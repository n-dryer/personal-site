# .cursorrules (Project-specific for n-dryer/personal-site)

## Project Summary

- Stack: Vite + React 19 + TypeScript + Tailwind; Vite with SWC for React.
- Node: 20. Package manager: Yarn v1 only (yarn.lock is source of truth).
- Features: Interactive and filterable skills showcase, interactive timeline dynamically responding to skill selections.
- Tests: minimal unit tests only (CSS tokens); keep fast and green.
- CI: single job “CI / build-and-test” on pull_request (yarn install → build → test).
- Deploy: manual GitHub Pages workflow (“Deploy (GitHub Pages)”), publishes dist/.
- Branch protection (main): PR required; required check “CI / build-and-test (pull_request)”; Squash only; auto-delete branches ON.

## Runtime & Tooling

- Node: 20.
- Yarn v1 only. Do not add package-lock.json or switch managers.
- Use package.json scripts (start/build/preview/test/lint/format).
- Never commit build outputs (dist/, build/, out/).

## Vite & Pages Base

- vite.config.ts: base must match hosting:
  - Custom domain or user site (recommended here): base: '/'
  - Project pages (<https://user.github.io/repo/`>): base: '/repo/' (note trailing slash)
- Add or edit base only if asked; otherwise leave as documented.

## Paths & Imports

- TypeScript baseUrl: 'src'. Import from feature roots: 'hooks/…', 'content/…', etc.
- Prefer static ESM imports; do not use CommonJS require().
- Avoid top-level await or dynamic imports in non-async contexts.

## Code Style & Quality

- Honor .editorconfig (2 spaces, LF, final newline).
- Keep files small and clear; guard clauses, early returns.
- TypeScript strict: avoid any; add types when missing; prefer unknown over any.
- Do not add heavy runtime deps without justification.

## Tests

- Keep the minimal CSS variables test passing; do not add slow/e2e tests.
- If you add tests, keep them fast and deterministic.
- Don’t change Jest env or expand CI unless explicitly requested.

## Git & PR Workflow (solo)

- Always: create a feature branch (feat/…, fix/…, chore/…); never commit to main.
- Commit small, scoped changes; push frequently.
- Open a PR; enable Auto-merge (Squash). CI must pass; branch auto-deletes on merge.
- After merge: pull main locally before starting a new branch.

## CI Integration

- Do not rename the CI job; required check is “CI / build-and-test (pull_request)”.
- Do not introduce additional required checks without instruction.
- Keep CI yarn-only; no pnpm/npm steps.

## Deploy

- Deploy only via the manual “Deploy (GitHub Pages)” workflow or `yarn deploy` if explicitly asked.
- Do not auto-deploy on push unless requested.

## Security & Secrets

- Never commit .env*. Use process.env; document env usage if needed.
- Keep CodeQL enabled; do not disable security scanning.

## Editor/Agents Guidance

- This project supports interaction with AI agents via the Chrome DevTools MCP. Agents can use MCP to control a Chrome browser instance for debugging and testing purposes.
- Respect .cursorrules and .cursorignore; do not include binaries/artifacts in context.
- Propose risky or wide refactors before executing.
- Explain rationale briefly in PR description for non-trivial changes.

## When in doubt

- Prefer the simplest change that passes CI and keeps main stable.
- Ask (via PR notes) before altering CI, deploy, or branch protection settings.
